<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Leetcode Weekly Contest 270 Review</title>
      <link href="/2021/12/08/Leetcode-Weekly-Contest-270-Review/"/>
      <url>/2021/12/08/Leetcode-Weekly-Contest-270-Review/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode-Weekly-Contest-270-Review"><a href="#Leetcode-Weekly-Contest-270-Review" class="headerlink" title="Leetcode Weekly Contest 270 Review"></a>Leetcode Weekly Contest 270 Review</h1><p>這場打得不太好，第四題為圖論一筆畫問題確實不會寫之外，在前三題的解題過程中都有藏有許多瑕疵需要好好反省</p><p><img src="/images/LeetcodeIcon.png"></p><hr><h2 id="Q1-LC-2094-Finding-3-Digit-Even-Numbers"><a href="#Q1-LC-2094-Finding-3-Digit-Even-Numbers" class="headerlink" title="Q1: LC-2094. Finding 3-Digit Even Numbers"></a>Q1: LC-2094. Finding 3-Digit Even Numbers</h2><p>第一題正常來說都要秒解，但這題我不但TLE一次還寫了十分鐘。題目是從pool中任挑三個數字排成一排，並由小到大輸出所有不重複的狀況。</p><p>我的程式簡單來說就是把pool跑permutation並只做前三項，第一版繳交時是在6分鐘的時候，程式碼基本上都寫對，也有在idx=3的時候輸出答案，<strong>但是程式碼內竟然沒有在idx=3的時候return</strong>，導致繼續作idx&gt;3的部分，最終TLE，最後找bug並做了一些其實不用的優化，花了10分鐘加上TLE才修正。</p><hr><h2 id="Q2-LC-2095-Delete-the-Middle-Node-of-a-Linked-List"><a href="#Q2-LC-2095-Delete-the-Middle-Node-of-a-Linked-List" class="headerlink" title="Q2: LC-2095. Delete the Middle Node of a Linked List"></a>Q2: LC-2095. Delete the Middle Node of a Linked List</h2><p>從LinkedList中找到特定節點並刪除，這題我覺得寫得還算快，僅花費4分鐘。</p><hr><h2 id="Q3-LC-2096-Step-By-Step-Directions-From-a-Binary-Tree-Node-to-Another"><a href="#Q3-LC-2096-Step-By-Step-Directions-From-a-Binary-Tree-Node-to-Another" class="headerlink" title="Q3: LC-2096. Step-By-Step Directions From a Binary Tree Node to Another"></a>Q3: LC-2096. Step-By-Step Directions From a Binary Tree Node to Another</h2><p>這題我覺得程式碼寫得很冗，題目希望從一棵樹中，輸出從某個點到另一個點的最短路徑。</p><p>這題程式碼的部分特別難看，一堆if區塊，非常瑣碎，導致寫了整整12分鐘。</p><p>有看到一種做法，像這種只給樹根的二元樹，而且又不是從樹根為起點，<strong>可以將整棵樹轉換為adjacent matrix</strong>，之後便能透過adj直接從指定起點往外移動。</p><hr><h2 id="Q4-LC-2097-Valid-Arrangement-of-Pairs"><a href="#Q4-LC-2097-Valid-Arrangement-of-Pairs" class="headerlink" title="Q4: LC-2097. Valid Arrangement of Pairs"></a>Q4: LC-2097. Valid Arrangement of Pairs</h2><p>這題可說是一筆畫問題的模板題，一筆畫問題是一個圖論經典問題，沒看過算是我不學無術。</p><p>值得一提的是，其實我在想得過程中是有點接近正確答案的，當時在思考要如何把某另一條路徑插在目前的路徑上。</p><p>仔細想想，這就是divide and conquer或是stack的思想。不馬上輸出目前的答案，先把另一條路徑走完並輸出後再把其他的也補上。</p><hr><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>26分鐘寫3題，加上1次TLE：總名次436/12931</p><ul><li>不要求程式碼逐行檢查，但是判停條件的位置最好再看一下</li><li>有些二元樹的題目可以轉換成adjacent matrix會更容易寫</li><li>Euler Path&amp;Circle以及Hierholzer’s Algorithm需要自己去念書</li></ul>]]></content>
      
      
      <categories>
          
          <category> Competitive Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Competitive Programming </tag>
            
            <tag> Leetcode </tag>
            
            <tag> Leetcode Contest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>修正hexo-prism-plugin，大括號變為`&amp;#123;`和`&amp;#125`</title>
      <link href="/2021/12/08/fix-curly-bracket-in-hexo-prism-plugin/"/>
      <url>/2021/12/08/fix-curly-bracket-in-hexo-prism-plugin/</url>
      
        <content type="html"><![CDATA[<h1 id="Issue"><a href="#Issue" class="headerlink" title="Issue"></a>Issue</h1><p>使用hexo-prism-plugin，在程式區塊中，左右大括號會自動被轉為html語法，也就是<code>&amp;#123;</code>和<code>&amp;#125</code>。</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><ol><li>找到 <code>/node_modules\hexo-prism-plugin\src\index.js</code></li><li>將const map修改為</li></ol><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token string">'&amp;#39;'</span><span class="token punctuation">:</span> <span class="token string">'\''</span><span class="token punctuation">,</span>  <span class="token string">'&amp;amp;'</span><span class="token punctuation">:</span> <span class="token string">'&amp;'</span><span class="token punctuation">,</span>  <span class="token string">'&amp;gt;'</span><span class="token punctuation">:</span> <span class="token string">'>'</span><span class="token punctuation">,</span>  <span class="token string">'&amp;lt;'</span><span class="token punctuation">:</span> <span class="token string">'&lt;'</span><span class="token punctuation">,</span>  <span class="token string">'&amp;quot;'</span><span class="token punctuation">:</span> <span class="token string">'"'</span><span class="token punctuation">,</span>  <span class="token string">'&amp;#123;'</span><span class="token punctuation">:</span> <span class="token string">'{'</span><span class="token punctuation">,</span>  <span class="token string">'&amp;#125;'</span><span class="token punctuation">:</span> <span class="token string">'}'</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://github.com/ele828/hexo-prism-plugin/issues/61">hexo-prism-plugin: curly bracket issue</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Eulerian Circuit and Path</title>
      <link href="/2021/12/07/Graph-Euler-Circuit/"/>
      <url>/2021/12/07/Graph-Euler-Circuit/</url>
      
        <content type="html"><![CDATA[<h1 id="Euler-Circuit"><a href="#Euler-Circuit" class="headerlink" title="Euler Circuit"></a>Euler Circuit</h1><h2 id="經典問題"><a href="#經典問題" class="headerlink" title="經典問題"></a>經典問題</h2><h3 id="Seven-Bridges-of-Konigsberg"><a href="#Seven-Bridges-of-Konigsberg" class="headerlink" title="Seven Bridges of Königsberg"></a>Seven Bridges of Königsberg</h3><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/5/5d/Konigsberg_bridges.png/300px-Konigsberg_bridges.png" alt="七橋問題"></p><p>這是著名的七橋問題，嘗試找一條可以經過七座橋各一次，然後<strong>回到原處的路線</strong>。</p><p>由於每座橋只能穿過一次，對圖上的某一個點來看，一旦從某座橋進入，就要從另一座橋走出去。所以，只要看到有個節點有奇數個邊，就表示有一條橋可以走入該節點卻走不出去。</p><h3 id="Eulerian-Path"><a href="#Eulerian-Path" class="headerlink" title="Eulerian Path"></a>Eulerian Path</h3><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/1/11/Blender3D_HouseOfStNiclas.gif/83px-Blender3D_HouseOfStNiclas.gif" alt="一筆畫問題"></p><p>又稱<strong>一筆畫問題</strong>，源於七橋問題，對於一個給定的圖，怎樣判斷是否存在著一個恰好包含了所有的邊，並且沒有重複的路徑</p><hr><h2 id="判斷是否滿足Euler"><a href="#判斷是否滿足Euler" class="headerlink" title="判斷是否滿足Euler"></a>判斷是否滿足Euler</h2><blockquote><p>滿足歐拉路徑不一定有歐拉回路</p></blockquote><p><img src="https://media.geeksforgeeks.org/wp-content/cdn-uploads/Euler1.png"></p><h3 id="無向圖"><a href="#無向圖" class="headerlink" title="無向圖"></a>無向圖</h3><ul><li>Eulerian Circuit<ol><li>All vertices with non-zero degree are connected. We don’t care about vertices with zero degree because they don’t belong to Eulerian Cycle or Path (we only consider all edges). </li><li>All vertices have even degree.</li></ol></li><li>Eulerian Path<ol><li>Same as condition (1) for Eulerian Circuit </li><li>If zero or two vertices have odd degree and all other vertices have even degree. Note that only one vertex with odd degree is not possible in an undirected graph (sum of all degrees is always even in an undirected graph)</li></ol></li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>graph<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 無向圖中判定歐拉回路及路徑</span>    odd <span class="token operator">=</span> vertex_num_with_odd_degree<span class="token punctuation">(</span>graph<span class="token punctuation">)</span>    <span class="token keyword">if</span> odd <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Eulerian Circuit"</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> odd <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Eulerian Path"</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> odd <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"no Eulerian"</span><span class="token punctuation">)</span></code></pre><h3 id="有向圖"><a href="#有向圖" class="headerlink" title="有向圖"></a>有向圖</h3><ul><li>Eulerian Circuit<ol><li>All vertices with nonzero degree belong to a single strongly connected component. </li><li>In degree is equal to the out degree for every vertex.</li></ol></li><li>Eulerian Path<ol><li>at most one vertex has (out-degree) − (in-degree) = 1</li><li>at most one vertex has (in-degree) − (out-degree) = 1</li><li>In degree is equal to the out degree for every other vertex, and these vertex should belong to a single connected component of the underlying undirected graph.</li></ol></li></ul><hr><h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><h3 id="Hierholzer’s-Algorithm"><a href="#Hierholzer’s-Algorithm" class="headerlink" title="Hierholzer’s Algorithm"></a>Hierholzer’s Algorithm</h3><p><font color="LightSalmon" size=5><strong>不論有向圖、無向圖、歐拉回路或歐拉路徑都能解</strong></font></p><h4 id="有向圖中找歐拉回路"><a href="#有向圖中找歐拉回路" class="headerlink" title="有向圖中找歐拉回路"></a>有向圖中找歐拉回路</h4><ol><li>先確認該圖滿足歐拉回路</li><li>從任意一個點v出發，隨便走一條尚未選過的邊直到卡住，此時必然是卡在點v，因為每個點的入度應該要等同出度，至此所走過的路徑已經是一個歐拉回路，但不一定剛好走過圖中的每個邊</li><li>退回曾路過的某個點w，若點w還有未曾走過的邊，則從w往另外一條未走過的邊移動，必然最終也會形成另一組封閉路徑並停在w，不斷做這件事情直到所有的邊都被走過</li></ol><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">EulerCircuit</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">find_circuit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> adj<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 假設adj已經滿足歐拉回路</span>        self<span class="token punctuation">.</span>adj <span class="token operator">=</span> adj        self<span class="token punctuation">.</span>res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>                start <span class="token operator">=</span> list<span class="token punctuation">(</span>adj<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>dfs<span class="token punctuation">(</span>start<span class="token punctuation">,</span> <span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>res<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> cur<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> self<span class="token punctuation">.</span>adj<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">:</span>            y <span class="token operator">=</span> self<span class="token punctuation">.</span>adj<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>            cur<span class="token punctuation">.</span>append<span class="token punctuation">(</span>y<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>dfs<span class="token punctuation">(</span>y<span class="token punctuation">,</span> cur<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cur<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>adj <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token number">0</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token number">1</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token number">2</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token number">3</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token number">4</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">}</span>res <span class="token operator">=</span> EulerCircuit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>find_circuit<span class="token punctuation">(</span>adj<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># res = [0, 1, 3, 4, 1, 2, 0]</span></code></pre><blockquote><ol><li>從0出發沿著紅線走回0，此時是一個封閉路徑為{0,1,2,0}，但藍線還沒走過</li><li>所以退回到點1並走藍線，又得到另一個封閉路徑{1,3,4,1}</li><li>將藍色路徑跟紅色路徑接起來就變成 {0,1,3,4,1,2,0}</li></ol></blockquote><p>實作上就是不能走的時候，pop資料回到先前的節點，直到遇到可以走的節點繼續繞其他路徑<br><img src="/images/euler_circuit.png" alt="EulerCircuit"></p><h4 id="無向圖找出歐拉回路-演算法筆記"><a href="#無向圖找出歐拉回路-演算法筆記" class="headerlink" title="無向圖找出歐拉回路 (演算法筆記)"></a>無向圖找出歐拉回路 (<a href="https://web.ntnu.edu.tw/~algo/Circuit.html#3">演算法筆記</a>)</h4><p><img src="/images/EulerCircuit7.png" alt="一個 Euler Circuit ，在某點相交，可拆成兩個 Euler Circuit "></p><p><img src="/images/EulerCircuit8.png" alt="兩個 Euler Circuit ，可在某點相接，合成一個 Euler Circuit 。"></p><p><img src="/images/EulerCircuit9.png" alt="大的 Euler Circuit 可拆成小的，小的可接成大的"></p><p>自然想到 Divide-and-Conquer Method，也就是在圖上<strong>隨意走一圈</strong>。未及之處，一定是一個（或數個） Euler Circuit 。</p><blockquote><p>Divide ：在圖上隨意走一圈。</p><p>Conquer：其餘部份遞迴下去。</p><p>Combine：其餘部分的Euler Circuit們，銜接到隨意走的那一圈。</p></blockquote><h4 id="有向圖中找歐拉路徑"><a href="#有向圖中找歐拉路徑" class="headerlink" title="有向圖中找歐拉路徑"></a>有向圖中找歐拉路徑</h4><ol><li>根據in-degree和out-degree的差確認是否有唯一起點，其餘相同</li></ol><h4 id="無向圖中找歐拉路徑"><a href="#無向圖中找歐拉路徑" class="headerlink" title="無向圖中找歐拉路徑"></a>無向圖中找歐拉路徑</h4><ol><li>根據degree的奇偶數量，確認是否能成為起點，其餘相同</li></ol><hr><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li><a href="https://www.geeksforgeeks.org/eulerian-path-and-circuit/">Geeksforgeeks: Eulerian path and circuit for undirected graph</a></li><li><a href="https://www.geeksforgeeks.org/euler-circuit-directed-graph/">Geeksforgeeks: Euler Circuit in a Directed Graph</a></li><li><a href="https://en.wikipedia.org/wiki/Eulerian_path">Wiki: Eulerian path</a></li><li><a href="https://web.ntnu.edu.tw/~algo/Circuit.html#3">演算法筆記: Euler Circuit</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Graph </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Graph </tag>
            
            <tag> Euler Circuit </tag>
            
            <tag> Euler Path </tag>
            
            <tag> DSA Tutorial Graph </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello Hexo</title>
      <link href="/2021/12/07/hello-world-hexo/"/>
      <url>/2021/12/07/hello-world-hexo/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/hexo_logo.jpg"></p><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h3 id="Process"><a href="#Process" class="headerlink" title="Process"></a>Process</h3><p>clear public, generate static files then deploy</p><pre class=" language-bash"><code class="language-bash">$ hexo cl$ hexo g -d</code></pre><h3 id="Font-of-Article"><a href="#Font-of-Article" class="headerlink" title="Font of Article"></a>Font of Article</h3><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span> <span class="token key atrule">title</span><span class="token punctuation">:</span> Hello Hexo<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2021-12-07 02:25:00</span><span class="token key atrule">author</span><span class="token punctuation">:</span> Aaron<span class="token key atrule">img</span><span class="token punctuation">:</span> /images/hexo_logo.jpg <span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token key atrule">cover</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token key atrule">coverImg</span><span class="token punctuation">:</span> /images/hexo_logo.jpg <span class="token key atrule">password</span><span class="token punctuation">:</span> 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92 <span class="token key atrule">toc</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token key atrule">summary</span><span class="token punctuation">:</span> Hi<span class="token punctuation">,</span> welcom to Hexo. It's a short guideline to teach you how to use Hexo.<span class="token key atrule">categories</span><span class="token punctuation">:</span>   <span class="token punctuation">-</span> Hexo<span class="token key atrule">tags</span><span class="token punctuation">:</span>   <span class="token punctuation">-</span> Hexo<span class="token punctuation">---</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
