<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Leetcode 913. Cat and Mouse</title>
      <link href="/2021/12/09/Leetcode913-Cat-and-Mouse/"/>
      <url>/2021/12/09/Leetcode913-Cat-and-Mouse/</url>
      
        <content type="html"><![CDATA[<p><img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQqCjL5wtwnzZg6umbXf9hvGNadI1yVmWSlje7ct3hfeuikITNkUXo3TfNd0YL6nN6xDgQ&usqp=CAU" alt="cat and mouse"></p><h1 id="Leetcode-913-Cat-and-Mouse"><a href="#Leetcode-913-Cat-and-Mouse" class="headerlink" title="Leetcode 913: Cat and Mouse"></a>Leetcode 913: Cat and Mouse</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p>給一個graph，其中老鼠在節點1，貓在節點2，出口在節點0。老鼠跟貓輪流移動一步，由老鼠先走，且滿足下面規則：</p><ul><li>貓跟老鼠永遠都做最優行動</li><li>貓不能走到出口也就是位置0</li><li>老鼠走到出口，則老鼠贏，回傳1</li><li>貓跟老鼠在同一個位置，貓贏，回傳2</li><li>如果遊戲無法結束，則平局，回傳0</li></ul><h2 id="題解"><a href="#題解" class="headerlink" title="題解"></a>題解</h2><p>這一題的難點在於，明明知道一定是DP問題，其中DP狀態可以定義為 (m, c, t)</p><ul><li>m: 老鼠的位置</li><li>c: 貓的位置</li><li>t: 輪到誰移動 (0老鼠，1貓)</li></ul><p>但尷尬的是，我們卻無法像是一般DP一樣有一個好的判停方式，這是什麼意思？我們比較下面幾個DP結構</p><h3 id="DP概念"><a href="#DP概念" class="headerlink" title="DP概念"></a>DP概念</h3><p>我們將分別展示一般的DP及有環的DP</p><h4 id="常見的DP路徑圖"><a href="#常見的DP路徑圖" class="headerlink" title="常見的DP路徑圖"></a>常見的DP路徑圖</h4><ul><li>以下圖而言我們首先會在V8判定最終結果</li><li>由於V5, V6, V7都依賴V8，便能進一步得知</li><li>依此類推直到推得V0的答案</li></ul><img src="/images/CatAndMouse_DP1.png" width="30%" height="30%"><ul><li>以下圖而言，首先會判定所有葉節點</li><li>接著把只依賴葉節點的所有點又再判定一次，以此類推<img src="/images/CatAndMouse_DP2.png" width="30%" height="30%"></li></ul><blockquote><p>不論是哪一種圖，都有一個很強大的性質，那就是<br><font color="LightSalmon" size=5><strong>依賴路徑中不存在環</strong></font></p></blockquote><h4 id="存在環的DP"><a href="#存在環的DP" class="headerlink" title="存在環的DP"></a>存在環的DP</h4><ul><li>F18依賴F16及F17</li><li>F16依賴F15及F19</li><li>F19又依賴F18<img src="/images/CatAndMouse_DP3.png" width="30%" height="30%"></li></ul><p><strong>此時就形成了一個環狀的DP，導致DP變成一種雞蛋問題</strong></p><ul><li>對F16而言，可以得到F15的結果，仍在等待F19</li><li>結果F19卻在等待F18，而F18卻在等F16</li></ul><h3 id="解決環狀DP"><a href="#解決環狀DP" class="headerlink" title="解決環狀DP"></a>解決環狀DP</h3><p>一般來說，這種情況下確實會無解。但某些情況下，對F16而言，未必非得知道F15及F19才能有答案。</p><blockquote><p>以本題來說，若當前狀態為 (m, c, t)</p><ul><li><strong>對角色t來說，只要存在一種移動方式確認為t的勝利，縱使不知道往其他方向的移動結果，這個狀態仍然是t的必勝狀態</strong></li><li><strong>若當前狀態的所有移動方式，都是已確認t會輸的狀態，顯然當前狀態也是t必輸的狀態</strong></li></ul></blockquote><h4 id="策略"><a href="#策略" class="headerlink" title="策略"></a>策略</h4><blockquote><p>因應上述的結論，以本題來說可以發展出一個策略</p><ul><li>首先挑出能求解的狀態，也就是(x,x,t)為貓的勝利，(0,x,t)為老鼠勝利，注意本題貓不能站在0的位置，將這些有解的狀態放入queue中</li><li>從queue中依序取出一種有解的狀態(m, c, t)，檢查該狀態的母節點是否能得到解，注意母節點是輪到對手移動的回合<ul><li><strong>母節點有解的方式有 (1)對手走到當前狀態就獲勝, (2)對手已經沒有任何能獲勝的其他路徑</strong></li></ul></li><li><strong>若母節點能得到解，將其放入queue中</strong></li></ul></blockquote><h2 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h2><h3 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h3><p>實踐上節的策略</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">catMouseGame</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> graph<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        n <span class="token operator">=</span> len<span class="token punctuation">(</span>graph<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># calculate degree of each state</span>        degrees <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">2</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#(m,c,t)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                    <span class="token keyword">continue</span>                degrees<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+=</span> len<span class="token punctuation">(</span>graph<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                degrees<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> len<span class="token punctuation">(</span>graph<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token keyword">in</span> graph<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># init dp and queue by known state</span>        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">2</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#(m,c,t)</span>        queue <span class="token operator">=</span> collections<span class="token punctuation">.</span>deque<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>            states <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>            results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>m<span class="token punctuation">,</span>c<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span> rv <span class="token keyword">in</span> zip<span class="token punctuation">(</span>states<span class="token punctuation">,</span> results<span class="token punctuation">)</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> rv            queue<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>states<span class="token punctuation">)</span>                <span class="token keyword">while</span> queue<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># for each known state, traversal their parents, checking whether its parent could come up the answer or not</span>            m<span class="token punctuation">,</span> c<span class="token punctuation">,</span> t <span class="token operator">=</span> queue<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>            rv <span class="token operator">=</span> dp<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">[</span>t<span class="token punctuation">]</span>            <span class="token keyword">if</span> t <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># mouse</span>                <span class="token keyword">for</span> pre <span class="token keyword">in</span> graph<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> pre <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">or</span> dp<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>pre<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>                        <span class="token keyword">continue</span>                    <span class="token comment" spellcheck="true"># 對貓而言，rv=2，所以只要能走到(m,c,t)就贏了。但若rv=1，則不去走，除非所有可以走的路徑都是rv=1</span>                    <span class="token keyword">if</span> rv <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>                        dp<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>pre<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span>                        queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> pre<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">else</span><span class="token punctuation">:</span>                        degrees<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>pre<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span>                        <span class="token keyword">if</span> degrees<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>pre<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                            dp<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>pre<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>                            queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> pre<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># cat</span>                <span class="token keyword">for</span> pre <span class="token keyword">in</span> graph<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> dp<span class="token punctuation">[</span>pre<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>                        <span class="token keyword">continue</span>                                        <span class="token comment" spellcheck="true"># 對老鼠而言剛好跟貓相反</span>                    <span class="token keyword">if</span> rv <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                        dp<span class="token punctuation">[</span>pre<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>                        queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span> c<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">else</span><span class="token punctuation">:</span>                        degrees<span class="token punctuation">[</span>pre<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span>                        <span class="token keyword">if</span> degrees<span class="token punctuation">[</span>pre<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                            dp<span class="token punctuation">[</span>pre<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span>                            queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span> c<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></code></pre><ul><li>時間複雜度：O(n^3)<ul><li>狀態有2*n^2種，每個狀態最多有n個節點相鄰</li></ul></li><li>空間複雜度：O(n^2)</li></ul><h3 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h3><p>總共n個點，老鼠如果走了n步還沒到終點也沒被貓逮到，則平局。找不到一個好的證明，不過有看到一個我比較能接受的解釋</p><blockquote><p>老鼠至多 n - 1 步就可以到達 0，我們記從 1 到 0 的這條路徑為 path。 如果第 n 步老鼠沒有到達 0 的話，就說明在某個時刻，老鼠偏離了原本的路徑path，為什麼會偏移呢？</p><p>說明在前面的某一點 p，貓在旁邊候著。貓到點 p 的距離小於等於老鼠到點 p 的距離。 （注意可以有多個這樣的點 p, 無論老鼠選取那條通往 0 的路徑，路上都有一個這樣的點，老鼠會在這個點被貓逮到）。 而老鼠不經過 p 的話又不可能到達 0。</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">catMouseGame</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> graph<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        @lru_cache<span class="token punctuation">(</span>None<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">search</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> t <span class="token operator">==</span> int<span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>len<span class="token punctuation">(</span>graph<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>            <span class="token keyword">if</span> x <span class="token operator">==</span> y<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">2</span>            <span class="token keyword">if</span> x <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token number">1</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">%</span> <span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> any<span class="token punctuation">(</span>search<span class="token punctuation">(</span>t<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> x_nxt<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span> <span class="token keyword">for</span> x_nxt <span class="token keyword">in</span> graph<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                                   <span class="token keyword">return</span> <span class="token number">1</span>                <span class="token keyword">if</span> any<span class="token punctuation">(</span>search<span class="token punctuation">(</span>t<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> x_nxt<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span> <span class="token keyword">for</span> x_nxt <span class="token keyword">in</span> graph<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                              <span class="token keyword">return</span> <span class="token number">0</span>                <span class="token keyword">return</span> <span class="token number">2</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> any<span class="token punctuation">(</span>search<span class="token punctuation">(</span>t<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y_nxt<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">2</span> <span class="token keyword">for</span> y_nxt <span class="token keyword">in</span> graph<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token keyword">if</span> y_nxt<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token number">2</span>                <span class="token keyword">if</span> any<span class="token punctuation">(</span>search<span class="token punctuation">(</span>t<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y_nxt<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span> <span class="token keyword">for</span> y_nxt <span class="token keyword">in</span> graph<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token keyword">if</span> y_nxt<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                      <span class="token keyword">return</span> <span class="token number">0</span>                <span class="token keyword">return</span> <span class="token number">1</span>        <span class="token keyword">return</span> search<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span></code></pre><ul><li>時間複雜度：O(n^4)<ul><li>個人覺得是狀態n^3再乘以n，不確定為何有人說是 (n^2)*m，如果有人能幫我解惑就好了</li></ul></li><li>空間複雜度：O(n^3)</li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://leetcode.com/problems/cat-and-mouse-ii/">Leetcode 1728. Cat and Mouse II</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> DP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dynamic Programming </tag>
            
            <tag> 環狀DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode Contest Review - Weekly 270</title>
      <link href="/2021/12/08/Leetcode-Contest-Review-Weekly270/"/>
      <url>/2021/12/08/Leetcode-Contest-Review-Weekly270/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/LeetcodeIcon.png"></p><h2 id="Leetcode-Weekly-Contest-270-Review"><a href="#Leetcode-Weekly-Contest-270-Review" class="headerlink" title="Leetcode Weekly Contest 270 Review"></a>Leetcode Weekly Contest 270 Review</h2><p>這場打得不太好，除了第四題為<strong>圖論的一筆畫問題</strong>確實不會之外，在前三題的解題過程中都有藏有許多瑕疵需要好好反省</p><h3 id="Q1-LC-2094-Finding-3-Digit-Even-Numbers"><a href="#Q1-LC-2094-Finding-3-Digit-Even-Numbers" class="headerlink" title="Q1: LC-2094. Finding 3-Digit Even Numbers"></a>Q1: LC-2094. Finding 3-Digit Even Numbers</h3><p>第一題正常來說都要秒解，但這題我不但TLE一次還寫了十分鐘。題目是從pool中任挑三個數字排成一排，並由小到大輸出所有不重複的狀況。</p><p>我的程式簡單來說就是把pool跑permutation並只做前三項，第一版繳交時是在6分鐘的時候，程式碼基本上都寫對，也有在idx=3的時候輸出答案，<strong>但是程式碼內竟然沒有在idx=3的時候return</strong>，導致繼續作idx&gt;3的部分，最終TLE，最後找bug並做了一些其實不用的優化，花了10分鐘加上TLE才修正。</p><h3 id="Q2-LC-2095-Delete-the-Middle-Node-of-a-Linked-List"><a href="#Q2-LC-2095-Delete-the-Middle-Node-of-a-Linked-List" class="headerlink" title="Q2: LC-2095. Delete the Middle Node of a Linked List"></a>Q2: LC-2095. Delete the Middle Node of a Linked List</h3><p>從LinkedList中找到特定節點並刪除，這題我覺得寫得還算快，僅花費4分鐘。</p><h3 id="Q3-LC-2096-Step-By-Step-Directions-From-a-Binary-Tree-Node-to-Another"><a href="#Q3-LC-2096-Step-By-Step-Directions-From-a-Binary-Tree-Node-to-Another" class="headerlink" title="Q3: LC-2096. Step-By-Step Directions From a Binary Tree Node to Another"></a>Q3: LC-2096. Step-By-Step Directions From a Binary Tree Node to Another</h3><p>這題我覺得程式碼寫得很冗，題目希望從一棵樹中，輸出從某個點到另一個點的最短路徑。</p><p>這題程式碼的部分特別難看，一堆if區塊，非常瑣碎，導致寫了整整12分鐘。</p><p>有看到一種做法，像這種只給樹根的二元樹，而且又不是從樹根為起點，<strong>可以將整棵樹轉換為adjacent matrix</strong>，之後便能透過adj直接從指定起點往外移動。</p><h3 id="Q4-LC-2097-Valid-Arrangement-of-Pairs"><a href="#Q4-LC-2097-Valid-Arrangement-of-Pairs" class="headerlink" title="Q4: LC-2097. Valid Arrangement of Pairs"></a>Q4: LC-2097. Valid Arrangement of Pairs</h3><p>這題可說是一筆畫問題的模板題，一筆畫問題是一個圖論經典問題，沒看過算是我不學無術。</p><p>值得一提的是，其實我在想得過程中是有點接近正確答案的，當時在思考要如何把某另一條路徑插在目前的路徑上。</p><p>仔細想想，這就是divide and conquer或是stack的思想。不馬上輸出目前的答案，先把另一條路徑走完並輸出後再把其他的也補上。</p><h3 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h3><p>沒能完賽，26分鐘寫3題，加上1次TLE：總名次436/12931</p><hr><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><ul><li>不要求程式碼逐行檢查，但是判停條件的位置最好再看一下</li><li>有些二元樹的題目可以轉換成adjacent matrix會更容易寫</li><li>Euler Path&amp;Circle以及Hierholzer’s Algorithm需要自己去念書</li></ul>]]></content>
      
      
      <categories>
          
          <category> Competitive Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Competitive Programming </tag>
            
            <tag> Leetcode </tag>
            
            <tag> Leetcode Contest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>修正hexo-prism-plugin，大括號變為`&amp;#123;`和`&amp;#125`</title>
      <link href="/2021/12/08/fix-curly-bracket-in-hexo-prism-plugin/"/>
      <url>/2021/12/08/fix-curly-bracket-in-hexo-prism-plugin/</url>
      
        <content type="html"><![CDATA[<h1 id="Issue"><a href="#Issue" class="headerlink" title="Issue"></a>Issue</h1><p>使用hexo-prism-plugin，在程式區塊中，左右大括號會自動被轉為html語法，也就是<code>&amp;#123;</code>和<code>&amp;#125</code>。</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><ol><li>找到 <code>/node_modules\hexo-prism-plugin\src\index.js</code></li><li>將const map修改為</li></ol><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token string">'&amp;#39;'</span><span class="token punctuation">:</span> <span class="token string">'\''</span><span class="token punctuation">,</span>  <span class="token string">'&amp;amp;'</span><span class="token punctuation">:</span> <span class="token string">'&amp;'</span><span class="token punctuation">,</span>  <span class="token string">'&amp;gt;'</span><span class="token punctuation">:</span> <span class="token string">'>'</span><span class="token punctuation">,</span>  <span class="token string">'&amp;lt;'</span><span class="token punctuation">:</span> <span class="token string">'&lt;'</span><span class="token punctuation">,</span>  <span class="token string">'&amp;quot;'</span><span class="token punctuation">:</span> <span class="token string">'"'</span><span class="token punctuation">,</span>  <span class="token string">'&amp;#123;'</span><span class="token punctuation">:</span> <span class="token string">'{'</span><span class="token punctuation">,</span>  <span class="token string">'&amp;#125;'</span><span class="token punctuation">:</span> <span class="token string">'}'</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://github.com/ele828/hexo-prism-plugin/issues/61">hexo-prism-plugin: curly bracket issue</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Eulerian Circuit and Path</title>
      <link href="/2021/12/07/Graph-Euler-Circuit/"/>
      <url>/2021/12/07/Graph-Euler-Circuit/</url>
      
        <content type="html"><![CDATA[<h1 id="Euler-Circuit"><a href="#Euler-Circuit" class="headerlink" title="Euler Circuit"></a>Euler Circuit</h1><h2 id="經典問題"><a href="#經典問題" class="headerlink" title="經典問題"></a>經典問題</h2><h3 id="Seven-Bridges-of-Konigsberg"><a href="#Seven-Bridges-of-Konigsberg" class="headerlink" title="Seven Bridges of Königsberg"></a>Seven Bridges of Königsberg</h3><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/5/5d/Konigsberg_bridges.png/300px-Konigsberg_bridges.png" alt="七橋問題"></p><p>這是著名的七橋問題，嘗試找一條可以經過七座橋各一次，然後<strong>回到原處的路線</strong>。</p><p>由於每座橋只能穿過一次，對圖上的某一個點來看，一旦從某座橋進入，就要從另一座橋走出去。所以，只要看到有個節點有奇數個邊，就表示有一條橋可以走入該節點卻走不出去。</p><h3 id="Eulerian-Path"><a href="#Eulerian-Path" class="headerlink" title="Eulerian Path"></a>Eulerian Path</h3><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/1/11/Blender3D_HouseOfStNiclas.gif/83px-Blender3D_HouseOfStNiclas.gif" alt="一筆畫問題"></p><p>又稱<strong>一筆畫問題</strong>，源於七橋問題，對於一個給定的圖，怎樣判斷是否存在著一個恰好包含了所有的邊，並且沒有重複的路徑</p><hr><h2 id="判斷是否滿足Euler"><a href="#判斷是否滿足Euler" class="headerlink" title="判斷是否滿足Euler"></a>判斷是否滿足Euler</h2><blockquote><p>滿足歐拉路徑不一定有歐拉回路</p></blockquote><p><img src="https://media.geeksforgeeks.org/wp-content/cdn-uploads/Euler1.png"></p><h3 id="無向圖"><a href="#無向圖" class="headerlink" title="無向圖"></a>無向圖</h3><ul><li>Eulerian Circuit<ol><li>All vertices with non-zero degree are connected. We don’t care about vertices with zero degree because they don’t belong to Eulerian Cycle or Path (we only consider all edges). </li><li>All vertices have even degree.</li></ol></li><li>Eulerian Path<ol><li>Same as condition (1) for Eulerian Circuit </li><li>If zero or two vertices have odd degree and all other vertices have even degree. Note that only one vertex with odd degree is not possible in an undirected graph (sum of all degrees is always even in an undirected graph)</li></ol></li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>graph<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 無向圖中判定歐拉回路及路徑</span>    odd <span class="token operator">=</span> vertex_num_with_odd_degree<span class="token punctuation">(</span>graph<span class="token punctuation">)</span>    <span class="token keyword">if</span> odd <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Eulerian Circuit"</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> odd <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Eulerian Path"</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> odd <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"no Eulerian"</span><span class="token punctuation">)</span></code></pre><h3 id="有向圖"><a href="#有向圖" class="headerlink" title="有向圖"></a>有向圖</h3><ul><li>Eulerian Circuit<ol><li>All vertices with nonzero degree belong to a single strongly connected component. </li><li>In degree is equal to the out degree for every vertex.</li></ol></li><li>Eulerian Path<ol><li>at most one vertex has (out-degree) − (in-degree) = 1</li><li>at most one vertex has (in-degree) − (out-degree) = 1</li><li>In degree is equal to the out degree for every other vertex, and these vertex should belong to a single connected component of the underlying undirected graph.</li></ol></li></ul><hr><h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><h3 id="Hierholzer’s-Algorithm"><a href="#Hierholzer’s-Algorithm" class="headerlink" title="Hierholzer’s Algorithm"></a>Hierholzer’s Algorithm</h3><p><font color="LightSalmon" size=5><strong>不論有向圖、無向圖、歐拉回路或歐拉路徑都能解</strong></font></p><h4 id="有向圖中找歐拉回路"><a href="#有向圖中找歐拉回路" class="headerlink" title="有向圖中找歐拉回路"></a>有向圖中找歐拉回路</h4><ol><li>先確認該圖滿足歐拉回路</li><li>從任意一個點v出發，隨便走一條尚未選過的邊直到卡住，此時必然是卡在點v，因為每個點的入度應該要等同出度，至此所走過的路徑已經是一個歐拉回路，但不一定剛好走過圖中的每個邊</li><li>退回曾路過的某個點w，若點w還有未曾走過的邊，則從w往另外一條未走過的邊移動，必然最終也會形成另一組封閉路徑並停在w，不斷做這件事情直到所有的邊都被走過</li></ol><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">EulerCircuit</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">find_circuit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> adj<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 假設adj已經滿足歐拉回路</span>        self<span class="token punctuation">.</span>adj <span class="token operator">=</span> adj        self<span class="token punctuation">.</span>res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>                start <span class="token operator">=</span> list<span class="token punctuation">(</span>adj<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>dfs<span class="token punctuation">(</span>start<span class="token punctuation">,</span> <span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>res<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> cur<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> self<span class="token punctuation">.</span>adj<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">:</span>            y <span class="token operator">=</span> self<span class="token punctuation">.</span>adj<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>            cur<span class="token punctuation">.</span>append<span class="token punctuation">(</span>y<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>dfs<span class="token punctuation">(</span>y<span class="token punctuation">,</span> cur<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cur<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>adj <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token number">0</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token number">1</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token number">2</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token number">3</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token number">4</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">}</span>res <span class="token operator">=</span> EulerCircuit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>find_circuit<span class="token punctuation">(</span>adj<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># res = [0, 1, 3, 4, 1, 2, 0]</span></code></pre><blockquote><ol><li>從0出發沿著紅線走回0，此時是一個封閉路徑為{0,1,2,0}，但藍線還沒走過</li><li>所以退回到點1並走藍線，又得到另一個封閉路徑{1,3,4,1}</li><li>將藍色路徑跟紅色路徑接起來就變成 {0,1,3,4,1,2,0}</li></ol></blockquote><p>實作上就是不能走的時候，pop資料回到先前的節點，直到遇到可以走的節點繼續繞其他路徑<br><img src="/images/euler_circuit.png" alt="EulerCircuit"></p><h4 id="無向圖找出歐拉回路-演算法筆記"><a href="#無向圖找出歐拉回路-演算法筆記" class="headerlink" title="無向圖找出歐拉回路 (演算法筆記)"></a>無向圖找出歐拉回路 (<a href="https://web.ntnu.edu.tw/~algo/Circuit.html#3">演算法筆記</a>)</h4><p><img src="/images/EulerCircuit7.png" alt="一個 Euler Circuit ，在某點相交，可拆成兩個 Euler Circuit "></p><p><img src="/images/EulerCircuit8.png" alt="兩個 Euler Circuit ，可在某點相接，合成一個 Euler Circuit 。"></p><p><img src="/images/EulerCircuit9.png" alt="大的 Euler Circuit 可拆成小的，小的可接成大的"></p><p>自然想到 Divide-and-Conquer Method，也就是在圖上<strong>隨意走一圈</strong>。未及之處，一定是一個（或數個） Euler Circuit 。</p><blockquote><p>Divide ：在圖上隨意走一圈。</p><p>Conquer：其餘部份遞迴下去。</p><p>Combine：其餘部分的Euler Circuit們，銜接到隨意走的那一圈。</p></blockquote><h4 id="有向圖中找歐拉路徑"><a href="#有向圖中找歐拉路徑" class="headerlink" title="有向圖中找歐拉路徑"></a>有向圖中找歐拉路徑</h4><ol><li>根據in-degree和out-degree的差確認是否有唯一起點，其餘相同</li></ol><h4 id="無向圖中找歐拉路徑"><a href="#無向圖中找歐拉路徑" class="headerlink" title="無向圖中找歐拉路徑"></a>無向圖中找歐拉路徑</h4><ol><li>根據degree的奇偶數量，確認是否能成為起點，其餘相同</li></ol><hr><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li><a href="https://www.geeksforgeeks.org/eulerian-path-and-circuit/">Geeksforgeeks: Eulerian path and circuit for undirected graph</a></li><li><a href="https://www.geeksforgeeks.org/euler-circuit-directed-graph/">Geeksforgeeks: Euler Circuit in a Directed Graph</a></li><li><a href="https://en.wikipedia.org/wiki/Eulerian_path">Wiki: Eulerian path</a></li><li><a href="https://web.ntnu.edu.tw/~algo/Circuit.html#3">演算法筆記: Euler Circuit</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Graph </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Graph </tag>
            
            <tag> Euler Circuit </tag>
            
            <tag> Euler Path </tag>
            
            <tag> DSA Tutorial Graph </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello Hexo</title>
      <link href="/2021/12/07/hello-world-hexo/"/>
      <url>/2021/12/07/hello-world-hexo/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/hexo_logo.jpg"></p><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h3 id="Process"><a href="#Process" class="headerlink" title="Process"></a>Process</h3><p>clear public, generate static files then deploy</p><pre class=" language-bash"><code class="language-bash">$ hexo cl$ hexo g -d</code></pre><h3 id="Font-of-Article"><a href="#Font-of-Article" class="headerlink" title="Font of Article"></a>Font of Article</h3><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span> <span class="token key atrule">title</span><span class="token punctuation">:</span> Hello Hexo<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2021-12-07 02:25:00</span><span class="token key atrule">author</span><span class="token punctuation">:</span> Aaron<span class="token key atrule">img</span><span class="token punctuation">:</span> /images/hexo_logo.jpg <span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token key atrule">cover</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token key atrule">coverImg</span><span class="token punctuation">:</span> /images/hexo_logo.jpg <span class="token key atrule">password</span><span class="token punctuation">:</span> 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92 <span class="token key atrule">toc</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token key atrule">summary</span><span class="token punctuation">:</span> Hi<span class="token punctuation">,</span> welcom to Hexo. It's a short guideline to teach you how to use Hexo.<span class="token key atrule">categories</span><span class="token punctuation">:</span>   <span class="token punctuation">-</span> Hexo<span class="token key atrule">tags</span><span class="token punctuation">:</span>   <span class="token punctuation">-</span> Hexo<span class="token punctuation">---</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode Contest Review - Biweekly 66 &amp; Weekly 269</title>
      <link href="/2021/11/29/Leetcode-Contest-Review-Biweekly66-Weekly269/"/>
      <url>/2021/11/29/Leetcode-Contest-Review-Biweekly66-Weekly269/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/LeetcodeIcon.png"></p><h2 id="Leetcode-Biweekly-Contest-66-Review"><a href="#Leetcode-Biweekly-Contest-66-Review" class="headerlink" title="Leetcode Biweekly Contest 66 Review"></a>Leetcode Biweekly Contest 66 Review</h2><h3 id="Q1-LC-2085-Count-Common-Words-With-One-Occurrence"><a href="#Q1-LC-2085-Count-Common-Words-With-One-Occurrence" class="headerlink" title="Q1: LC-2085. Count Common Words With One Occurrence"></a>Q1: LC-2085. Count Common Words With One Occurrence</h3><p>簡單查數量的題目，比typing的速度而已</p><h3 id="Q2-LC-2086-Minimum-Number-of-Buckets-Required-to-Collect-Rainwater-from-Houses"><a href="#Q2-LC-2086-Minimum-Number-of-Buckets-Required-to-Collect-Rainwater-from-Houses" class="headerlink" title="Q2: LC-2086. Minimum Number of Buckets Required to Collect Rainwater from Houses"></a>Q2: LC-2086. Minimum Number of Buckets Required to Collect Rainwater from Houses</h3><p>明顯是greedy的題目，但實作時有點卡住，沒有理好要以房子為單位搜尋還是以空地為單位搜尋，多花了幾分鐘。</p><h3 id="Q3-LC-2087-Minimum-Cost-Homecoming-of-a-Robot-in-a-Grid"><a href="#Q3-LC-2087-Minimum-Cost-Homecoming-of-a-Robot-in-a-Grid" class="headerlink" title="Q3: LC-2087. Minimum Cost Homecoming of a Robot in a Grid"></a>Q3: LC-2087. Minimum Cost Homecoming of a Robot in a Grid</h3><p>只要看到最短距離，就腦殘想用Dijkstra，反而沒意識到這題所有的最短路徑都是最短距離，隨便挑一條greedy計算就可以了。時間浪費在實作dijkstra外加一個TLE</p><h3 id="Q4-LC-2088-Count-Fertile-Pyramids-in-a-Land"><a href="#Q4-LC-2088-Count-Fertile-Pyramids-in-a-Land" class="headerlink" title="Q4: LC-2088. Count Fertile Pyramids in a Land"></a>Q4: LC-2088. Count Fertile Pyramids in a Land</h3><p>明顯是DP問題，我的解法重複又冗長的程式碼太多，這部分應該包成function或是翻轉測資就好。</p><p>另外我解這種稍微複雜的題目，常常階段性的寫程式碼，例如這題我先寫一段程式，對每個點都找到往左及往右可以抵達的距離，但當下並沒有確定好下一步該做什麼，只是覺得這樣做有幫助，事後也確實是有幫助，並以此為基礎完成這題。值得反省的是，<strong>如果這麼做沒幫助的話，是否不但浪費時間，又限縮了自己後續思考問題的方式</strong>。</p><h3 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h3><p>40分鐘完賽加上1次TLE：總名次160/8620</p><hr><h2 id="Leetcode-Weekly-Contest-269-Review"><a href="#Leetcode-Weekly-Contest-269-Review" class="headerlink" title="Leetcode Weekly Contest 269 Review"></a>Leetcode Weekly Contest 269 Review</h2><h3 id="Q1-LC-2089-Find-Target-Indices-After-Sorting-Array"><a href="#Q1-LC-2089-Find-Target-Indices-After-Sorting-Array" class="headerlink" title="Q1: LC-2089. Find Target Indices After Sorting Array"></a>Q1: LC-2089. Find Target Indices After Sorting Array</h3><p>比打字速度的題目</p><h3 id="Q2-LC-2090-K-Radius-Subarray-Averages"><a href="#Q2-LC-2090-K-Radius-Subarray-Averages" class="headerlink" title="Q2: LC-2090. K Radius Subarray Averages"></a>Q2: LC-2090. K Radius Subarray Averages</h3><p>固定遮罩的總合問題，也是看到就知道怎麼做。值得檢討的是我<strong>題目常常看一半就開始作答</strong>，做到一半的時候發覺欠缺了一些資訊才回去敘述中找，以本例來說我寫到一半才回去找遮罩寬度的定義以及輸出要落在什麼位置，算是蠻不好的習慣，另外也是同一個原因，一些需要事先定義的變數在寫的過程才一直補上，導致程式碼前幾行看起來沒有章法又混亂。</p><h3 id="Q3-LC-2091-Removing-Minimum-and-Maximum-From-Array"><a href="#Q3-LC-2091-Removing-Minimum-and-Maximum-From-Array" class="headerlink" title="Q3: LC-2091. Removing Minimum and Maximum From Array"></a>Q3: LC-2091. Removing Minimum and Maximum From Array</h3><p>我覺得這題寫得還不錯，只是有些程式碼看起來可以合併成一行才不會顯得有點冗，這場到寫完第三題共花7分鐘。</p><h3 id="Q4-LC-2092-Find-All-People-With-Secret"><a href="#Q4-LC-2092-Find-All-People-With-Secret" class="headerlink" title="Q4: LC-2092. Find All People With Secret"></a>Q4: LC-2092. Find All People With Secret</h3><p>明顯是依照時間處理DSU的問題。只要是時間順序的題目，都要記得「<strong>確認同一個時間內是否可能有多筆事件</strong>」，第一版繳交的答案就是沒意識到這件事情導致WA。為了處理同一時間產生的事件，需要在這個時間點分群以及判斷哪些群該被納入答案中，但我第二版沒處理好分群問題，浪費時間寫了一個現在看來不可思議的答案，當時直到寫完測試才發現問題，最後第三版才改對。因此單單這題花了27分鐘外加一個WA，大把時間浪費在解bug以及莫名其妙的錯誤，明顯也是沒想清楚就開始寫題目的壞習慣導致。</p><h3 id="Result-1"><a href="#Result-1" class="headerlink" title="Result"></a>Result</h3><p>34分鐘完賽加上1次WA：總名次: 215/10907</p><hr><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><ul><li>題目及測資範圍都看完再作答 (cirtical)</li><li>做後續步驟前最好再問自己一遍真的想清楚了嗎 (cirtical)<ul><li>包含確認是否有必要先寫中間步驟的程式碼</li></ul></li><li>競速心態要調整，最好把時間都遮起來</li><li>時間序的題目要注意重複時間問題</li><li>冗長又重複的程式碼該包成function</li></ul>]]></content>
      
      
      <categories>
          
          <category> Competitive Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Competitive Programming </tag>
            
            <tag> Leetcode </tag>
            
            <tag> Leetcode Contest </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
